[build-system]
# Minimum requirements for the build system to execute.
requires = [
    "setuptools",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "scipy-openblas64"
# v0.3.30
version = "0.3.30.0.4"
requires-python = ">=3.7"
description = "Provides OpenBLAS for python packaging"
readme = "README.md"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: C++",
  "License :: OSI Approved :: BSD License",
]
# authors = [
# ]
# maintainers = [
# ]
license = {file = "LICENSE.txt"}

[project.urls]
homepage = "https://github.com/MacPython/openblas-libs"
upstream = "https://github.com/OpenMathLib/OpenBLAS"

[tool.setuptools.packages.find]
# scanning for namespace packages is true by default in pyproject.toml, so
# # you do NOT need to include the following line.
namespaces = true
where = ["local"]

[options]
install_requires = "importlib-metadata ~= 1.0 ; python_version < '3.8'"

[tool.setuptools.package-data]
scipy_openblas64 = ["lib/*", "include/*", "lib/pkgconfig/*", "lib/cmake/openblas/*"]

[tool.cibuildwheel]
environment-pass = [
  "REPO_DIR",
  "OPENBLAS_COMMIT",
  "MACOSX_DEPLOYMENT_TARGET",
  "NIGHTLY",
  "MB_ML_LIBC",
  "MB_ML_VER",
  "INTERFACE64",
  "BUILD_DIR",
  "PLAT",
  "OS-NAME",
]

[tool.cibuildwheel.linux]
before-build = "bash ci-before-build.sh"
repair-wheel-command = "bash ci-repair-wheel.sh {dest_dir} {wheel}"
test-command = "cd {package} && bash ci-test.sh "
archs = ["x86_64", "aarch64", "i686"]

[tool.cibuildwheel.macos]
before-build = "bash ci-before-build.sh"
repair-wheel-command = "bash ci-repair-wheel.sh {dest_dir} {wheel}"
test-command = "cd {package} && bash ci-test.sh"
archs = ["x86_64", "universal2", "arm64"]

[tool.cibuildwheel.windows]
before-build = "pwsh -File  tools/build_openblas_for_win.ps1 && bash tools/build_wheel_prepare_for_win.sh"
repair-wheel-command = "bash -c \"for f in dist/*.whl; do mv $f \"${f/%any.whl/$WHEEL_PLAT.whl}\"; done\""
test-command = "cd {package} && bash tools/test_for_win.sh"
archs = ["AMD64", "x86", "ARM64"]